{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/return_values.js", "../lib/return_indices.js", "../lib/return_pairs.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar indexOf = require( '@stdlib/utils-index-of' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar returns = [ 'values', 'indices', '*' ];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {*} [options.thisArg] - execution context\n* @param {string} [options.returns] - output format\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'returns': '*',\n*     'thisArg': {}\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'thisArg' ) ) {\n\t\topts.thisArg = options.thisArg;\n\t}\n\tif ( hasOwnProp( options, 'returns' ) ) {\n\t\topts.returns = options.returns;\n\t\tif ( indexOf( returns, opts.returns ) === -1 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'returns', returns.join( '\", \"' ), opts.returns ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\n\n\n// MAIN //\n\n/**\n* Groups values according to an indicator function and outputs results as element values.\n*\n* ## Notes\n*\n* -   We need to cache the collection value to prevent the edge case where, during the invocation of the indicator function, the element at index `i` is swapped for some other value. For some, that might be a feature; here, we take the stance that one should be less clever.\n* -   Checking for an \"own\" property is necessary to guard against the edge case where an indicator function returns a group identifier which matches a method or property on the `Object` prototype.\n*\n* @private\n* @param {Collection} collection - collection to group\n* @param {Options} opts - function options\n* @param {*} [opts.thisArg] - execution context\n* @param {Function} indicator - indicator function specifying which group an element in the input collection belongs to\n* @returns {Object} group results\n*\n* @example\n* function indicator( v ) {\n*     return v[ 0 ];\n* }\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n*\n* var out = groupBy( arr, {}, indicator );\n* // returns { 'b': [ 'beep', 'boop', 'bar' ], 'f': [ 'foo' ] }\n*/\nfunction groupBy( collection, opts, indicator ) {\n\tvar thisArg;\n\tvar out;\n\tvar len;\n\tvar g;\n\tvar v;\n\tvar i;\n\n\tthisArg = opts.thisArg;\n\tlen = collection.length;\n\n\tout = {};\n\tfor ( i = 0; i < len; i++ ) {\n\t\tv = collection[ i ];\n\t\tg = indicator.call( thisArg, v, i );\n\t\tif ( hasOwnProp( out, g ) ) {\n\t\t\tout[ g ].push( v );\n\t\t} else {\n\t\t\tout[ g ] = [ v ];\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = groupBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\n\n\n// MAIN //\n\n/**\n* Groups values according to an indicator function and outputs results according to element indices.\n*\n* ## Notes\n*\n* -   Checking for an \"own\" property is necessary to guard against the edge case where an indicator function returns a group identifier which matches a method or property on the `Object` prototype.\n*\n* @private\n* @param {Collection} collection - collection to group\n* @param {Options} opts - function options\n* @param {*} [opts.thisArg] - execution context\n* @param {Function} indicator - indicator function specifying which group an element in the input collection belongs to\n* @returns {Object} group results\n*\n* @example\n* function indicator( v ) {\n*     return v[ 0 ];\n* }\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n*\n* var out = groupBy( arr, {}, indicator );\n* // returns { 'b': [ 0, 1, 3 ], 'f': [ 2 ] }\n*/\nfunction groupBy( collection, opts, indicator ) {\n\tvar thisArg;\n\tvar out;\n\tvar len;\n\tvar g;\n\tvar i;\n\n\tthisArg = opts.thisArg;\n\tlen = collection.length;\n\n\tout = {};\n\tfor ( i = 0; i < len; i++ ) {\n\t\tg = indicator.call( thisArg, collection[ i ], i );\n\t\tif ( hasOwnProp( out, g ) ) {\n\t\t\tout[ g ].push( i );\n\t\t} else {\n\t\t\tout[ g ] = [ i ];\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = groupBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\n\n\n// MAIN //\n\n/**\n* Groups values according to an indicator function and outputs results as index-element values.\n*\n* ## Notes\n*\n* -   We need to cache the collection value to prevent the edge case where, during the invocation of the indicator function, the element at index `i` is swapped for some other value. For some, that might be a feature; here, we take the stance that one should be less clever.\n* -   Checking for an \"own\" property is necessary to guard against the edge case where an indicator function returns a group identifier which matches a method or property on the `Object` prototype.\n*\n* @private\n* @param {Collection} collection - collection to group\n* @param {Options} opts - function options\n* @param {*} [opts.thisArg] - execution context\n* @param {Function} indicator - indicator function specifying which group an element in the input collection belongs to\n* @returns {Object} group results\n*\n* @example\n* function indicator( v ) {\n*     return v[ 0 ];\n* }\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n*\n* var out = groupBy( arr, {}, indicator );\n* // returns { 'b': [ [ 0, 'beep' ], [ 1, 'boop' ], [ 3, 'bar' ] ], 'f': [ [ 2, 'foo' ] ] }\n*/\nfunction groupBy( collection, opts, indicator ) {\n\tvar thisArg;\n\tvar out;\n\tvar len;\n\tvar g;\n\tvar v;\n\tvar i;\n\n\tthisArg = opts.thisArg;\n\tlen = collection.length;\n\n\tout = {};\n\tfor ( i = 0; i < len; i++ ) {\n\t\tv = collection[ i ];\n\t\tg = indicator.call( thisArg, v, i );\n\t\tif ( hasOwnProp( out, g ) ) {\n\t\t\tout[ g ].push( [ i, v ] );\n\t\t} else {\n\t\t\tout[ g ] = [ [ i, v ] ];\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = groupBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\nvar returnValues = require( './return_values.js' );\nvar returnIndices = require( './return_indices.js' );\nvar returnPairs = require( './return_pairs.js' );\n\n\n// MAIN //\n\n/**\n* Groups values according to an indicator function.\n*\n* @param {Collection} collection - collection to group\n* @param {Options} [options] - function options\n* @param {*} [options.thisArg] - execution context\n* @param {string} [options.returns=\"values\"] - if `values`, values are returned; if `indices`, indices are returned; if `*`, both indices and values are returned\n* @param {Function} indicator - indicator function specifying which group an element in the input collection belongs to\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} last argument must be a function\n* @throws {TypeError} must provide valid options\n* @returns {Object} group results\n*\n* @example\n* function indicator( v ) {\n*     return v[ 0 ];\n* }\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n*\n* var out = groupBy( arr, indicator );\n* // returns { 'b': [ 'beep', 'boop', 'bar' ], 'f': [ 'foo' ] }\n*\n* @example\n* function indicator( v ) {\n*     return v[ 0 ];\n* }\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n*\n* var opts = {\n*     'returns': 'indices'\n* };\n* var out = groupBy( arr, opts, indicator );\n* // returns { 'b': [ 0, 1, 3 ], 'f': [ 2 ] }\n*\n* @example\n* function indicator( v ) {\n*     return v[ 0 ];\n* }\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n*\n* var opts = {\n*     'returns': '*'\n* };\n* var out = groupBy( arr, opts, indicator );\n* // returns { 'b': [ [ 0, 'beep' ], [ 1, 'boop' ], [ 3, 'bar' ] ], 'f': [ [ 2, 'foo' ] ] }\n*/\nfunction groupBy( collection, options, indicator ) {\n\tvar opts;\n\tvar err;\n\tvar cb;\n\tif ( !isCollection( collection ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a collection. Value: `%s`.', collection ) );\n\t}\n\topts = {\n\t\t'returns': 'values'\n\t};\n\tif ( arguments.length === 2 ) {\n\t\tcb = options;\n\t} else {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tcb = indicator;\n\t}\n\tif ( !isFunction( cb ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Last argument must be a function. Value: `%s`.', cb ) );\n\t}\n\tif ( opts.returns === 'values' ) {\n\t\treturn returnValues( collection, opts, cb );\n\t}\n\tif ( opts.returns === 'indices' ) {\n\t\treturn returnIndices( collection, opts, cb );\n\t}\n\treturn returnPairs( collection, opts, cb );\n}\n\n\n// EXPORTS //\n\nmodule.exports = groupBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Group values according to an indicator function.\n*\n* @module @stdlib/utils-group-by\n*\n* @example\n* var groupBy = require( '@stdlib/utils-group-by' );\n*\n* function indicator( v ) {\n*     return v[ 0 ];\n* }\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n*\n* var out = groupBy( arr, indicator );\n* // returns { 'b': [ 'beep', 'boop', 'bar' ], 'f': [ 'foo' ] }\n*\n* @example\n* var groupBy = require( '@stdlib/utils-group-by' );\n*\n* function indicator( v ) {\n*     return v[ 0 ];\n* }\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n*\n* var opts = {\n*     'returns': 'indices'\n* };\n* var out = groupBy( arr, opts, indicator );\n* // returns { 'b': [ 0, 1, 3 ], 'f': [ 2 ] }\n*\n* @example\n* var groupBy = require( '@stdlib/utils-group-by' );\n*\n* function indicator( v ) {\n*     return v[ 0 ];\n* }\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n*\n* var opts = {\n*     'returns': '*'\n* };\n* var out = groupBy( arr, opts, indicator );\n* // returns { 'b': [ [ 0, 'beep' ], [ 1, 'boop' ], [ 3, 'bar' ] ], 'f': [ [ 2, 'foo' ] ] }\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "indexOf", "format", "returns", "validate", "opts", "options", "require_return_values", "__commonJSMin", "exports", "module", "hasOwnProp", "groupBy", "collection", "opts", "indicator", "thisArg", "out", "len", "g", "v", "i", "require_return_indices", "__commonJSMin", "exports", "module", "hasOwnProp", "groupBy", "collection", "opts", "indicator", "thisArg", "out", "len", "g", "i", "require_return_pairs", "__commonJSMin", "exports", "module", "hasOwnProp", "groupBy", "collection", "opts", "indicator", "thisArg", "out", "len", "g", "v", "i", "require_main", "__commonJSMin", "exports", "module", "isCollection", "isFunction", "format", "validate", "returnValues", "returnIndices", "returnPairs", "groupBy", "collection", "options", "indicator", "opts", "err", "cb", "main"]
}
